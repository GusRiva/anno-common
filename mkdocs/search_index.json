{
    "docs": [
        {
            "location": "/", 
            "text": "Anno documentation\n\n\n\n\nDeveloper Guide\n\n\nRunning a server\n\n\nDemos\n\n\nGlossary", 
            "title": "Home"
        }, 
        {
            "location": "/#anno-documentation", 
            "text": "Developer Guide  Running a server  Demos  Glossary", 
            "title": "Anno documentation"
        }, 
        {
            "location": "/glossary/", 
            "text": "Glossary\n\n\nStore\n\n\nA store is a class adhering to the \nStore API\n. It is an interface to a\n\nstorage backend\n.\n\n\nTop-Level Annotation", 
            "title": "Glossary"
        }, 
        {
            "location": "/glossary/#glossary", 
            "text": "", 
            "title": "Glossary"
        }, 
        {
            "location": "/glossary/#store", 
            "text": "A store is a class adhering to the  Store API . It is an interface to a storage backend .", 
            "title": "Store"
        }, 
        {
            "location": "/glossary/#top-level-annotation", 
            "text": "", 
            "title": "Top-Level Annotation"
        }, 
        {
            "location": "/api/store/", 
            "text": "Store API\n\n\n\n\n\nPublic API\n\n\nstatic\n load(loadingModule)\n\n\nModules may call this static method to instantiate a store from the\nenvironment and using the packages installed in the calling package.\n\n// my-package/index.js\n\n\nconst\n \nstore\n \n=\n \nrequire\n(\n@kba/anno-store\n).\nload\n(\nmodule\n)\n\n\nstore\n.\ninit\n(...)\n\n\n\n\nuse(proc, hook=\npre\n)\n\n\nUse processor before (\nhook=pre\n) or after (\nhook=post\n) store method.\n\n\ninit(options, cb)\n\n\nInitialize a connection to the store.\n- \n@param {Options} options\n\n- \n@param {String} options.user\n\n- \n@param {function} callback\n\n\nwipe(options, callback)\n\n\nWipe the store, revisions and all.\n- \n@param {Options} options\n\n- \n@param {String} options.user\n\n- \n@param {function} callback\n\n\ndisconnect(options, callback)\n\n\nDisconnect a store.\nA disconnected store cannot be used until \ninit\n is called again.\n- \n@param {Options} options\n\n- \n@param {String} options.user\n\n- \n@param {function} callback\n\n\nget(annoId, options, cb)\n\n\nRetrieve an annotation.\n- \n@param {String|Array\nString\n} annoIds\n\n- \n@param {Object} options\n\n    - \n@param {Boolean} options.latest\n Return the latest revision only\n    - \n@param {Boolean} options.metadataOnly\n Return only metadata\n    - \n@param {Boolean} options.skipVersions\n Omit versions\n    - \n@param {Boolean} options.skipReplies\n Omit replies\n- \n@param {String} options.user\n\n- \n@param {function} callback\n\n\ncreate(anno, options, callback)\n\n\nCreate an annotation.\n- \n@param {Object} anno\n\n- \n@param {Options} options\n\n- \n@param String options.slug Proposal for the ID to create\n\n- \n@param {String} options.user\n\n- \n@param {function} callback\n\n\nrevise(annoId, anno, options, callback)\n\n\nRevise an annotation.\n- \n@param {String} annoId\n\n- \n@param {Object} anno\n\n- \n@param {Options} options\n\n  - \n@param {String} options.user\n\n- \n@param {function} callback\n\n\ndelete(annoId, options, callback)\n\n\nremove(annoId, options, callback)\n\n\nDelete an annotation, i.e. set the deleted date.\n- \n@param {String} annoId\n\n- \n@param {Options} options\n\n- \n@param {Boolean} options.forceDelete\n Set to \ntrue\n to hint the store to\n                                     actually delete, not just mark deleted\n- \n@param {String} options.user\n\n- \n@param {function} callback\n\n\nsearch(query, options, callback)\n\n\nSearch the store.\n- \n@param {Object} query\n\n- \n@param {Options} options\n\n- \n@param {String} options.user\n\n- \n@param {function} callback\n\n\nreply(annoId, anno, options, callback)\n\n\ncomment(annoId, anno, options, callback)\n\n\nReply to an annotation\n- \n@param {String} annoId\n\n- \n@param {Object} anno\n\n- \n@param {Options} options\n\n- \n@param {String} options.user\n\n- \n@param {function} callback\n\n\naclcheck(targets, options, callback)\n\n\n\n\n@param {Array} targets\n\n\n@param {Options} options\n\n\n@param {function} callback\n\n\n\n\nimport(anno, options, callback)\n\n\nReplaces the complete annotation with the passed annotation, not just revise it.\n- \n@param {Object} anno\n\n- \n@param {Options} options\n\n  - \n@param String options.slug Proposal for the ID to create\n\n  - \n@param {String} options.user\n\n- \n@param {function} callback\n\n\nProtected API\n\n\nThese methods are available for store implementations but should not be\nused by consumers.\n\n\n_idFromURL(url)\n\n\nGet only the slug part of a URL\n\n\n_urlFromId(annoId)\n\n\nGenerate a full URL to an annotation by its id.\n\n\n_normalizeTarget(annoDoc)\n\n\nTODO no idempotency of targets with normalization -\n disabled for now\n\n\n_normalizeType(anno)\n\n\nMake sure \nanno.type\n exists, is an Array and contains \nAnnotation\n\n\ndeleteId(anno)\n\n\nDelete the \nid\n and store it in \nvia\n.\n- \n@param Object anno\n\n\n_genid(slug=\n)\n\n\nGenerate an ID for the annotation from \nslug\n and a \n\"nice\"\nslugid", 
            "title": "Store"
        }, 
        {
            "location": "/api/store/#store-api", 
            "text": "", 
            "title": "Store API"
        }, 
        {
            "location": "/api/store/#public-api", 
            "text": "", 
            "title": "Public API"
        }, 
        {
            "location": "/api/store/#static-loadloadingmodule", 
            "text": "Modules may call this static method to instantiate a store from the\nenvironment and using the packages installed in the calling package. // my-package/index.js  const   store   =   require ( @kba/anno-store ). load ( module )  store . init (...)", 
            "title": "static load(loadingModule)"
        }, 
        {
            "location": "/api/store/#useproc-hookpre", 
            "text": "Use processor before ( hook=pre ) or after ( hook=post ) store method.", 
            "title": "use(proc, hook=&#39;pre&#39;)"
        }, 
        {
            "location": "/api/store/#initoptions-cb", 
            "text": "Initialize a connection to the store.\n-  @param {Options} options \n-  @param {String} options.user \n-  @param {function} callback", 
            "title": "init(options, cb)"
        }, 
        {
            "location": "/api/store/#wipeoptions-callback", 
            "text": "Wipe the store, revisions and all.\n-  @param {Options} options \n-  @param {String} options.user \n-  @param {function} callback", 
            "title": "wipe(options, callback)"
        }, 
        {
            "location": "/api/store/#disconnectoptions-callback", 
            "text": "Disconnect a store.\nA disconnected store cannot be used until  init  is called again.\n-  @param {Options} options \n-  @param {String} options.user \n-  @param {function} callback", 
            "title": "disconnect(options, callback)"
        }, 
        {
            "location": "/api/store/#getannoid-options-cb", 
            "text": "Retrieve an annotation.\n-  @param {String|Array String } annoIds \n-  @param {Object} options \n    -  @param {Boolean} options.latest  Return the latest revision only\n    -  @param {Boolean} options.metadataOnly  Return only metadata\n    -  @param {Boolean} options.skipVersions  Omit versions\n    -  @param {Boolean} options.skipReplies  Omit replies\n-  @param {String} options.user \n-  @param {function} callback", 
            "title": "get(annoId, options, cb)"
        }, 
        {
            "location": "/api/store/#createanno-options-callback", 
            "text": "Create an annotation.\n-  @param {Object} anno \n-  @param {Options} options \n-  @param String options.slug Proposal for the ID to create \n-  @param {String} options.user \n-  @param {function} callback", 
            "title": "create(anno, options, callback)"
        }, 
        {
            "location": "/api/store/#reviseannoid-anno-options-callback", 
            "text": "Revise an annotation.\n-  @param {String} annoId \n-  @param {Object} anno \n-  @param {Options} options \n  -  @param {String} options.user \n-  @param {function} callback", 
            "title": "revise(annoId, anno, options, callback)"
        }, 
        {
            "location": "/api/store/#deleteannoid-options-callback", 
            "text": "", 
            "title": "delete(annoId, options, callback)"
        }, 
        {
            "location": "/api/store/#removeannoid-options-callback", 
            "text": "Delete an annotation, i.e. set the deleted date.\n-  @param {String} annoId \n-  @param {Options} options \n-  @param {Boolean} options.forceDelete  Set to  true  to hint the store to\n                                     actually delete, not just mark deleted\n-  @param {String} options.user \n-  @param {function} callback", 
            "title": "remove(annoId, options, callback)"
        }, 
        {
            "location": "/api/store/#searchquery-options-callback", 
            "text": "Search the store.\n-  @param {Object} query \n-  @param {Options} options \n-  @param {String} options.user \n-  @param {function} callback", 
            "title": "search(query, options, callback)"
        }, 
        {
            "location": "/api/store/#replyannoid-anno-options-callback", 
            "text": "", 
            "title": "reply(annoId, anno, options, callback)"
        }, 
        {
            "location": "/api/store/#commentannoid-anno-options-callback", 
            "text": "Reply to an annotation\n-  @param {String} annoId \n-  @param {Object} anno \n-  @param {Options} options \n-  @param {String} options.user \n-  @param {function} callback", 
            "title": "comment(annoId, anno, options, callback)"
        }, 
        {
            "location": "/api/store/#aclchecktargets-options-callback", 
            "text": "@param {Array} targets  @param {Options} options  @param {function} callback", 
            "title": "aclcheck(targets, options, callback)"
        }, 
        {
            "location": "/api/store/#importanno-options-callback", 
            "text": "Replaces the complete annotation with the passed annotation, not just revise it.\n-  @param {Object} anno \n-  @param {Options} options \n  -  @param String options.slug Proposal for the ID to create \n  -  @param {String} options.user \n-  @param {function} callback", 
            "title": "import(anno, options, callback)"
        }, 
        {
            "location": "/api/store/#protected-api", 
            "text": "These methods are available for store implementations but should not be\nused by consumers.", 
            "title": "Protected API"
        }, 
        {
            "location": "/api/store/#_idfromurlurl", 
            "text": "Get only the slug part of a URL", 
            "title": "_idFromURL(url)"
        }, 
        {
            "location": "/api/store/#_urlfromidannoid", 
            "text": "Generate a full URL to an annotation by its id.", 
            "title": "_urlFromId(annoId)"
        }, 
        {
            "location": "/api/store/#_normalizetargetannodoc", 
            "text": "TODO no idempotency of targets with normalization -  disabled for now", 
            "title": "_normalizeTarget(annoDoc)"
        }, 
        {
            "location": "/api/store/#_normalizetypeanno", 
            "text": "Make sure  anno.type  exists, is an Array and contains  Annotation", 
            "title": "_normalizeType(anno)"
        }, 
        {
            "location": "/api/store/#deleteidanno", 
            "text": "Delete the  id  and store it in  via .\n-  @param Object anno", 
            "title": "deleteId(anno)"
        }, 
        {
            "location": "/api/store/#_genidslug", 
            "text": "Generate an ID for the annotation from  slug  and a  \"nice\"\nslugid", 
            "title": "_genid(slug=&#39;&#39;)"
        }, 
        {
            "location": "/demos/queries/", 
            "text": "Demo for queries\n\n\n\n\nThis demo exposes the interface of the \nAnno.Queries\n API.\n\n\n\n\nDemo\n\n\n\n\nLoad Fixture\n\n\n\n\n\n\n\n  \nfirst\n\n  \nall\n\n  \nnumberOf\n\n\n\n\nQuery\n\n\n\n\nHelp\n\n\nIt loads the fixtures of the \nWeb Platform Tests for the Web Annotation\nProtocol\n\nvia the \nAnno.Fixtures\n module.\n\n\nChoose an annotation or write/paste your own in the textarea.\n\n\nThen select a query type and choose whether to return the first, all or the\ncount of return values.\n\n\nHTML\n\n\nSee markdown source\n\n\nJavascript\n\n\nSee \n/assets/js/queries.js\n for full source\n\n\nfunction\n \nquery\n()\n \n{\n\n    \nconst\n \ninput\n \n=\n \ninputField\n.\neditor\n.\ngetDoc\n().\ngetValue\n()\n\n    \nconst\n \nanno\n \n=\n \nJSON\n.\nparse\n(\ninput\n)\n\n    \nconst\n \nqueryClass\n \n=\n \nqueryClassList\n.\nvalue\n\n    \nconst\n \nmethod\n \n=\n \nmethodList\n.\nvalue\n\n    \nconst\n \nresult\n \n=\n \nAnno\n.\nQueries\n[\nqueryClass\n][\nmethod\n](\nanno\n)\n\n    \nresultField\n.\ninnerHTML\n \n=\n \nJSON\n.\nstringify\n(\nresult\n,\n \nnull\n,\n \n2\n)\n\n\n}", 
            "title": "Queries"
        }, 
        {
            "location": "/demos/queries/#demo-for-queries", 
            "text": "This demo exposes the interface of the  Anno.Queries  API.", 
            "title": "Demo for queries"
        }, 
        {
            "location": "/demos/queries/#demo", 
            "text": "Load Fixture    \n   first \n   all \n   numberOf   Query", 
            "title": "Demo"
        }, 
        {
            "location": "/demos/queries/#help", 
            "text": "It loads the fixtures of the  Web Platform Tests for the Web Annotation\nProtocol \nvia the  Anno.Fixtures  module.  Choose an annotation or write/paste your own in the textarea.  Then select a query type and choose whether to return the first, all or the\ncount of return values.", 
            "title": "Help"
        }, 
        {
            "location": "/demos/queries/#html", 
            "text": "See markdown source", 
            "title": "HTML"
        }, 
        {
            "location": "/demos/queries/#javascript", 
            "text": "See  /assets/js/queries.js  for full source  function   query ()   { \n     const   input   =   inputField . editor . getDoc (). getValue () \n     const   anno   =   JSON . parse ( input ) \n     const   queryClass   =   queryClassList . value \n     const   method   =   methodList . value \n     const   result   =   Anno . Queries [ queryClass ][ method ]( anno ) \n     resultField . innerHTML   =   JSON . stringify ( result ,   null ,   2 )  }", 
            "title": "Javascript"
        }, 
        {
            "location": "/demos/validator/", 
            "text": "Validator\n\n\n\n\nLoad Fixture\n\n\n\n\n\n\nValidate", 
            "title": "Validator"
        }, 
        {
            "location": "/demos/validator/#validator", 
            "text": "Load Fixture    Validate", 
            "title": "Validator"
        }, 
        {
            "location": "/develop/algorithms/", 
            "text": "Algorithms\n\n\nDOI\n\n\nTLA and AR have a field \ndoi\n that is by default \nnull\n and can be set to a DOI.\n\n\nA user with a \ndoiMinter\n role may call the \nmintDoi\n method.\n\n\nIf TLA has no doi:\n  Mint doi1 for URL of TLA\n  TLA.doi := doi1\nFor AR in TLA.hasReply:\n  If AR has no doi:\n    Mint doiN for URL of AR\n    AR.doi := doiN", 
            "title": "Algorithms"
        }, 
        {
            "location": "/develop/algorithms/#algorithms", 
            "text": "", 
            "title": "Algorithms"
        }, 
        {
            "location": "/develop/algorithms/#doi", 
            "text": "TLA and AR have a field  doi  that is by default  null  and can be set to a DOI.  A user with a  doiMinter  role may call the  mintDoi  method.  If TLA has no doi:\n  Mint doi1 for URL of TLA\n  TLA.doi := doi1\nFor AR in TLA.hasReply:\n  If AR has no doi:\n    Mint doiN for URL of AR\n    AR.doi := doiN", 
            "title": "DOI"
        }, 
        {
            "location": "/develop/", 
            "text": "Development\n\n\nThe project is organized as a set of modules inside a monorepo. To build the\ncore services like stores, server and browser library, you need to clone this\nrepo and build/develop what you want.\n\n\nOther projects of interest are:\n\n\n\n\nanno-frontend\n - A web user interface based on Vue.js\n\n\n\n\nBootstrap\n\n\nYou need the lerna tool to bootstrap all the modules:\n\n\n# Install lerna\n\nnpm install\n\n\n# Bootstrap dependencies of all modules\n\nlerna bootstrap --hoist\n\n\n\n\n\n\nWarning\n\n\nThis might take a while\n\n\n\n\nMakefile\n\n\nTesting and building is orchestrated with a self-documenting Makefile. Running \nmake\n in the root of the repository will give you an overview:\n\n\n\n\n\nTargets\n\n\nbootstrap                 lerna bootstrap and check for binaries\nanno-fixtures/index.json  Setup test fixtures\nstart\\:%                  cd anno-% \n make start\nstop\\:%                   cd anno-% \n make stop\nstart-all                 start mongodb, sql and server\nstop-all                  stop mongodb, sql and server\ntest-all                  Run all unit/integration tests.\ntest                      Run all tests set as TESTS.\ntest\\:%                   Run all unit/integration tests in \nMODULE\n, e.g. make test:store-sql\nclean                     Remove tempdir\nwebpack                   webpack min, fixtures, schema, memory-store, schema\nwebpack-dev               webpack -s\nwebpack-watch             webpack -d -w\nwebpack-min               webpack production version\nwebpack-clean             Remove all webpacked files\nsite                      Build the documentation in \n./site\n\nsite-serve                Continuously serve the site on localhost:8000\nsite-dist                 Rebuild the dist folder to be deployed\nshinclude                 Run shinclude on markdown sources\nsite-deploy               Deploy site to Github pages\n\n\n\n\n\nVariables\n\n\nTEMPDIR   Directory for temporary data. Default: \n/home/kba/build/github.com/kba/anno-docker/anno-common/temp\n\nREPORTER  TAP reporter to use. Default tap. One of\n            classic doc dot dump json jsonstream\n            landing list markdown min nyan progress  \n            silent spec tap xunit \nTESTS     All Tests. Default: \n./anno-queries/queries.test.js ./anno-util/util.test.js ./anno-store-memory/store-memory.test.js ./anno-plugins/rights.test.js ./anno-test/middlewares.test.js ./anno-schema/schema.test.js ./anno-store-file/store-file.test.js ./anno-store-http/store-http.test.js ./anno-store-sql/store-sql.test.js ./anno-store-mongodb/store-mongodb.test.js ./envyconf/envyconf.test.js", 
            "title": "Home"
        }, 
        {
            "location": "/develop/#development", 
            "text": "The project is organized as a set of modules inside a monorepo. To build the\ncore services like stores, server and browser library, you need to clone this\nrepo and build/develop what you want.  Other projects of interest are:   anno-frontend  - A web user interface based on Vue.js", 
            "title": "Development"
        }, 
        {
            "location": "/develop/#bootstrap", 
            "text": "You need the lerna tool to bootstrap all the modules:  # Install lerna \nnpm install # Bootstrap dependencies of all modules \nlerna bootstrap --hoist   Warning  This might take a while", 
            "title": "Bootstrap"
        }, 
        {
            "location": "/develop/#makefile", 
            "text": "Testing and building is orchestrated with a self-documenting Makefile. Running  make  in the root of the repository will give you an overview:   Targets  bootstrap                 lerna bootstrap and check for binaries\nanno-fixtures/index.json  Setup test fixtures\nstart\\:%                  cd anno-%   make start\nstop\\:%                   cd anno-%   make stop\nstart-all                 start mongodb, sql and server\nstop-all                  stop mongodb, sql and server\ntest-all                  Run all unit/integration tests.\ntest                      Run all tests set as TESTS.\ntest\\:%                   Run all unit/integration tests in  MODULE , e.g. make test:store-sql\nclean                     Remove tempdir\nwebpack                   webpack min, fixtures, schema, memory-store, schema\nwebpack-dev               webpack -s\nwebpack-watch             webpack -d -w\nwebpack-min               webpack production version\nwebpack-clean             Remove all webpacked files\nsite                      Build the documentation in  ./site \nsite-serve                Continuously serve the site on localhost:8000\nsite-dist                 Rebuild the dist folder to be deployed\nshinclude                 Run shinclude on markdown sources\nsite-deploy               Deploy site to Github pages  Variables  TEMPDIR   Directory for temporary data. Default:  /home/kba/build/github.com/kba/anno-docker/anno-common/temp \nREPORTER  TAP reporter to use. Default tap. One of\n            classic doc dot dump json jsonstream\n            landing list markdown min nyan progress  \n            silent spec tap xunit \nTESTS     All Tests. Default:  ./anno-queries/queries.test.js ./anno-util/util.test.js ./anno-store-memory/store-memory.test.js ./anno-plugins/rights.test.js ./anno-test/middlewares.test.js ./anno-schema/schema.test.js ./anno-store-file/store-file.test.js ./anno-store-http/store-http.test.js ./anno-store-sql/store-sql.test.js ./anno-store-mongodb/store-mongodb.test.js ./envyconf/envyconf.test.js", 
            "title": "Makefile"
        }, 
        {
            "location": "/develop/modules/", 
            "text": "Modules\n\n\nClick on the image for links\n\n\n\n\n\n\n\n\n\nanno-auth-server\n: Authentication and token generation server\n\n\nanno-cli\n: Command line interface for anno-*\n\n\nanno-errors\n: Shared errors for anno-*\n\n\nanno-fixtures\n: Sample data for testing and experimentation\n\n\nanno-plugins\n: Rights management for anno store (users and rules)\n\n\nanno-queries\n: Search and create fragments of Web Annotations\n\n\nanno-schema\n: JSON schema, OpenAPI and JSON-LD context\n\n\nanno-server\n: Web Annotation Protocol server with extensions\n\n\nanno-store\n: Interface for stores\n\n\nanno-store-file\n: Flat file store based on NeDB\n\n\nanno-store-http\n: HTTP Client to Web Annotation Protocol servers\n\n\nanno-store-memory\n: In-Memory store backed by NeDB\n\n\nanno-store-mongodb\n: MongoDB store\n\n\nanno-store-mongolike\n: Store base class for Mongo-like NoSQL databases\n\n\nanno-store-sql\n: \n\n\nanno-test\n: \n\n\nanno-util\n: Utility functions\n\n\nanno-util-loaders\n: Wrappers to configure processors\n\n\nanno-webpack\n: Bundling the anno-* tools for browser use", 
            "title": "Modules"
        }, 
        {
            "location": "/develop/modules/#modules", 
            "text": "Click on the image for links     anno-auth-server : Authentication and token generation server  anno-cli : Command line interface for anno-*  anno-errors : Shared errors for anno-*  anno-fixtures : Sample data for testing and experimentation  anno-plugins : Rights management for anno store (users and rules)  anno-queries : Search and create fragments of Web Annotations  anno-schema : JSON schema, OpenAPI and JSON-LD context  anno-server : Web Annotation Protocol server with extensions  anno-store : Interface for stores  anno-store-file : Flat file store based on NeDB  anno-store-http : HTTP Client to Web Annotation Protocol servers  anno-store-memory : In-Memory store backed by NeDB  anno-store-mongodb : MongoDB store  anno-store-mongolike : Store base class for Mongo-like NoSQL databases  anno-store-sql :   anno-test :   anno-util : Utility functions  anno-util-loaders : Wrappers to configure processors  anno-webpack : Bundling the anno-* tools for browser use", 
            "title": "Modules"
        }, 
        {
            "location": "/develop/options/", 
            "text": "Options\n\n\nskipVersions\n\n\nReturn only the top-level annotation.\n\n\nskipReplies\n\n\nDo not include replies with an annotation.\n\n\nmetadataOnly\n\n\nDo not include the annotation body.\n\n\nincludeDeleted\n\n\nInclude annotations that have been set to \ndeleted\n, which would otherwise result in a \n410\n.\n\n\nforceDelete\n\n\nCompletely remove an annotation, not just set it to \ndelete\n. \n\n\nSubsequent retrievals will result in \n404\n not \n410\n.", 
            "title": "Options"
        }, 
        {
            "location": "/develop/options/#options", 
            "text": "", 
            "title": "Options"
        }, 
        {
            "location": "/develop/options/#skipversions", 
            "text": "Return only the top-level annotation.", 
            "title": "skipVersions"
        }, 
        {
            "location": "/develop/options/#skipreplies", 
            "text": "Do not include replies with an annotation.", 
            "title": "skipReplies"
        }, 
        {
            "location": "/develop/options/#metadataonly", 
            "text": "Do not include the annotation body.", 
            "title": "metadataOnly"
        }, 
        {
            "location": "/develop/options/#includedeleted", 
            "text": "Include annotations that have been set to  deleted , which would otherwise result in a  410 .", 
            "title": "includeDeleted"
        }, 
        {
            "location": "/develop/options/#forcedelete", 
            "text": "Completely remove an annotation, not just set it to  delete .   Subsequent retrievals will result in  404  not  410 .", 
            "title": "forceDelete"
        }, 
        {
            "location": "/develop/plugins/", 
            "text": "Plugins\n\n\nWhen the method of a store is invoked, a \ncontext\n is created. The context is\njust an object with the method parameters, such as the new annotation in the\ncase of \ncreate\n or the lookup ID in the case of \nget\n, as well as metadata\npertinent to the annotation.\n\n\nPlugins can be registered to intercept the context at specific points in the\nprocessing lifecycle, currently \npre\n and \npost\n.\n\n\nPlugins hooking into the \npre\n phase can augment the context with additional\nmetadata or prevent further processing if certain conditions are met. Plugins\nhooking into the \npost\n phase can access and modify the context after the method has been\ndispatched.\n\n\nExamples where plugins are useful:\n\n\n\n\nValidation: Detect invalid arguments for an operation\n\n\nAuthentication: Inject a user id from a session into the context\n\n\nAuthorization: Determine whether the calling user is may execute this\n  operation.\n\n\nUser lookup: Provide user details from an external data source, such as the\n  display name.\n\n\nNotification: Send an e-mail for new annotations\n\n\n\n\nRegistering plugins\n\n\nTo register plugins, add them to the \nANNO_PLUGINS_PRE\n / \nANNO_PLUGINS_POST\n\nconfig variables. The syntax is \nmodule\n[:\nexport\n]\n:\n\n\n\n\nmod1\n:\nAuthPlugin\n will use the function exported as \nAuthPlugin\n from a module \nmod1\n\n\nmod1\n will use the default export of module \nmod1\n as the plugin", 
            "title": "Plugins"
        }, 
        {
            "location": "/develop/plugins/#plugins", 
            "text": "When the method of a store is invoked, a  context  is created. The context is\njust an object with the method parameters, such as the new annotation in the\ncase of  create  or the lookup ID in the case of  get , as well as metadata\npertinent to the annotation.  Plugins can be registered to intercept the context at specific points in the\nprocessing lifecycle, currently  pre  and  post .  Plugins hooking into the  pre  phase can augment the context with additional\nmetadata or prevent further processing if certain conditions are met. Plugins\nhooking into the  post  phase can access and modify the context after the method has been\ndispatched.  Examples where plugins are useful:   Validation: Detect invalid arguments for an operation  Authentication: Inject a user id from a session into the context  Authorization: Determine whether the calling user is may execute this\n  operation.  User lookup: Provide user details from an external data source, such as the\n  display name.  Notification: Send an e-mail for new annotations", 
            "title": "Plugins"
        }, 
        {
            "location": "/develop/plugins/#registering-plugins", 
            "text": "To register plugins, add them to the  ANNO_PLUGINS_PRE  /  ANNO_PLUGINS_POST \nconfig variables. The syntax is  module [: export ] :   mod1 : AuthPlugin  will use the function exported as  AuthPlugin  from a module  mod1  mod1  will use the default export of module  mod1  as the plugin", 
            "title": "Registering plugins"
        }, 
        {
            "location": "/server/acl/", 
            "text": "Rights Management\n\n\nRules\n\n\n\n\nTodo\n\n\n\n\nRoles\n\n\nRoles are used in \nRules\n to define rights for groups of users. They have no meaning without rules that use them!\n\n\nThe descriptions here are valid for the \ndefault rules\n\n\nadmin\n\n\n\n\nAll-powerful\n\n\n\n\ncreator\n\n\n\n\nMay create new annotations\n\n\nMay edit their own annotations\n\n\nMay comment on annotations\n\n\n\n\nmoderator\n\n\n\n\nAll from \ncreator\n\n\nMay edit other people's annotations\n\n\n\n\ndoiMinter\n\n\n\n\nMay assign DOI to an annotation", 
            "title": "Acl"
        }, 
        {
            "location": "/server/acl/#rights-management", 
            "text": "", 
            "title": "Rights Management"
        }, 
        {
            "location": "/server/acl/#rules", 
            "text": "Todo", 
            "title": "Rules"
        }, 
        {
            "location": "/server/acl/#roles", 
            "text": "Roles are used in  Rules  to define rights for groups of users. They have no meaning without rules that use them!  The descriptions here are valid for the  default rules", 
            "title": "Roles"
        }, 
        {
            "location": "/server/acl/#admin", 
            "text": "All-powerful", 
            "title": "admin"
        }, 
        {
            "location": "/server/acl/#creator", 
            "text": "May create new annotations  May edit their own annotations  May comment on annotations", 
            "title": "creator"
        }, 
        {
            "location": "/server/acl/#moderator", 
            "text": "All from  creator  May edit other people's annotations", 
            "title": "moderator"
        }, 
        {
            "location": "/server/acl/#doiminter", 
            "text": "May assign DOI to an annotation", 
            "title": "doiMinter"
        }, 
        {
            "location": "/server/env/", 
            "text": "Configuration settings\n\n\nACL_DATA\n\n\nBACKEND\n\n\nBASEPATH\n\n\nCOLLECTION_DATA\n\n\nCOLLECTION_FILE\n\n\nDEBUG\n\n\nDIST_DIR\n\n\nSTORE_HOOKS_PRE\n\n\nSTORE_HOOKS_POST\n\n\nHOST\n\n\nANNO_OPENAPI_HOST\n\n\nENABLE_JWT_AUTH\n\n\nKNEXFILE\n\n\nLOGFILE\n\n\nLOGLEVEL\n\n\nMIDDLEWARES\n\n\nPORT\n\n\nSTORE", 
            "title": "Env"
        }, 
        {
            "location": "/server/env/#configuration-settings", 
            "text": "", 
            "title": "Configuration settings"
        }, 
        {
            "location": "/server/env/#acl_data", 
            "text": "", 
            "title": "ACL_DATA"
        }, 
        {
            "location": "/server/env/#backend", 
            "text": "", 
            "title": "BACKEND"
        }, 
        {
            "location": "/server/env/#basepath", 
            "text": "", 
            "title": "BASEPATH"
        }, 
        {
            "location": "/server/env/#collection_data", 
            "text": "", 
            "title": "COLLECTION_DATA"
        }, 
        {
            "location": "/server/env/#collection_file", 
            "text": "", 
            "title": "COLLECTION_FILE"
        }, 
        {
            "location": "/server/env/#debug", 
            "text": "", 
            "title": "DEBUG"
        }, 
        {
            "location": "/server/env/#dist_dir", 
            "text": "", 
            "title": "DIST_DIR"
        }, 
        {
            "location": "/server/env/#store_hooks_pre", 
            "text": "", 
            "title": "STORE_HOOKS_PRE"
        }, 
        {
            "location": "/server/env/#store_hooks_post", 
            "text": "", 
            "title": "STORE_HOOKS_POST"
        }, 
        {
            "location": "/server/env/#host", 
            "text": "", 
            "title": "HOST"
        }, 
        {
            "location": "/server/env/#anno_openapi_host", 
            "text": "", 
            "title": "ANNO_OPENAPI_HOST"
        }, 
        {
            "location": "/server/env/#enable_jwt_auth", 
            "text": "", 
            "title": "ENABLE_JWT_AUTH"
        }, 
        {
            "location": "/server/env/#knexfile", 
            "text": "", 
            "title": "KNEXFILE"
        }, 
        {
            "location": "/server/env/#logfile", 
            "text": "", 
            "title": "LOGFILE"
        }, 
        {
            "location": "/server/env/#loglevel", 
            "text": "", 
            "title": "LOGLEVEL"
        }, 
        {
            "location": "/server/env/#middlewares", 
            "text": "", 
            "title": "MIDDLEWARES"
        }, 
        {
            "location": "/server/env/#port", 
            "text": "", 
            "title": "PORT"
        }, 
        {
            "location": "/server/env/#store", 
            "text": "", 
            "title": "STORE"
        }, 
        {
            "location": "/server/", 
            "text": "Setting up a server", 
            "title": "Home"
        }, 
        {
            "location": "/server/#setting-up-a-server", 
            "text": "", 
            "title": "Setting up a server"
        }
    ]
}